<div id="linearRegressionReact"></div>

<script type="text/babel">

    class LinearRegressionComponent extends React.Component {
        constructor(props) {
            super(props);
            this.state = {
                numberOfPoints: 100,
                width: 300,
                height: 300,
                points: [],
                correct_points: [],
                colorOfPoints: "#143CDC",
                line: null,
                colorOfLine: "#DC143C",
                widthOfLine: 0.65,
                learningRate: 0.0001,
                numIterations: 100,
                autoIncreaseStep: false
            };
            this.onChangeNumberOfPoints = this.onChangeNumberOfPoints.bind(this);
            this.onClickGeneratePoints = this.onClickGeneratePoints.bind(this);
            this.onClickDrawRegressionLine = this.onClickDrawRegressionLine.bind(this);
            this.onChangeNumIterations = this.onChangeNumIterations.bind(this);
            this.onChangeLearningRate = this.onChangeLearningRate.bind(this);
            this.onChangeAutoIncreaseStep = this.onChangeAutoIncreaseStep.bind(this);
            this.onClickClearRegressionLine = this.onClickClearRegressionLine.bind(this);
        }
        //helper
        generateNumber(max_){
            return Math.floor(Math.random() * max_);
        }
        resetCanvas(){
            let line = null;
            let points = this.state.points;            
            while(points.length > 0) {
                points.pop();
            }
            let correct_points = this.state.correct_points;            
            while(correct_points.length > 0) {
                correct_points.pop();
            }
            this.setState({
                points, line, correct_points
            });
            const canvas = this.refs.canvas;
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = '#ffffff';
            ctx.fillRect(0,0,canvas.width, canvas.height);
        }
        addPoint(point){
            let points = this.state.points;
            points.push(point);
            this.setState({
                points
            });
        }
        addCorrectPoint(point){
            let correct_points = this.state.correct_points;
            correct_points.push(point);
            this.setState({
                correct_points
            });
        }
        drawPoint(x,y,color=this.state.colorOfPoints){
            const ctx = this.refs.canvas.getContext('2d');
            ctx.beginPath();
            ctx.strokeStyle = color;
            ctx.arc(x, this.refs.canvas.height-y, 0.65, 0, 2 * Math.PI);
            ctx.stroke();
        }
        drawLine(){
            const ctx = this.refs.canvas.getContext('2d');
            ctx.beginPath();
            ctx.strokeStyle = this.state.colorOfLine;
            ctx.lineWidth = this.state.widthOfLine;
            ctx.moveTo(this.state.line.begin.x,this.refs.canvas.height-this.state.line.begin.y);
            ctx.lineTo(this.state.line.end.x,this.refs.canvas.height-this.state.line.end.y);
            ctx.stroke();
        }
        //Linear Regression using gradient
        sum(v){
            var sum=0;
            var M=v.length;
            for(var k=0;k<M;k++){
                sum+=v[k];
            }
            return sum;
        }
        pred_y(m,b,x){
            var y=[];
            var M=x.length;
            for(var k=0;k<M;k++){
                y[k]=m*x[k]+b;
            }
            return y;
        }
        D_m(x,D_b_arr){
            // * sum(X * (Y - Y_pred))
            var t=[];
            var M=x.length;
            for(var k=0;k<M;k++){
                t[k]=x[k] * D_b_arr[k];
            }
            return t;
        }
        D_b(y,Y_pred){
            // * sum(Y - Y_pred)
            var t=[];
            var M=y.length;
            for(var k=0;k<M;k++){
                t[k]=(y[k] - Y_pred[k]);
            }
            return t;
        }
        gradientDescent(x,y,numIterations,learningRate){
            var M = x.length;
            var m = 0;
            var b = 0;
            var M2 = (-2/M);
            for(var k=0;k<numIterations;k++){
                for(var i=0;i<M;i++){
                    var Y_pred = this.pred_y(m,b,x);
                    var D_b_arr = this.D_b(y,Y_pred);
                    var D_m = M2 * this.sum(this.D_m(x,D_b_arr));
                    var D_b = M2 * this.sum(D_b_arr);
                    var m = m - learningRate * D_m;
                    var b = b - learningRate * D_b;
                }
            }
            return {b:b,m:m};            
        }
        //action   
        onClickClearRegressionLine(event) {
            let line = null;
            let correct_points = this.state.correct_points;            
            while(correct_points.length > 0) {
                correct_points.pop();
            }
            this.setState({
                line, correct_points
            });
            const canvas = this.refs.canvas;
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = '#ffffff';
            ctx.fillRect(0,0,canvas.width, canvas.height);
            let points = this.state.points;
            for (var i = 0; i < this.state.numberOfPoints; i++) {
                this.drawPoint(points[i].x,points[i].y);
            }
        }     
        onClickDrawRegressionLine(event) {
            const ctx = this.refs.canvas.getContext('2d');
            let x = this.state.points.map(function(elem) {
                return elem.x;
            });
            let y = this.state.points.map(function(elem) {
                return elem.y;
            });
            var diff_between_b=0;
            var old_result=null;
            var count=0;
            while(diff_between_b>=0){
                //finding the best line
                console.log(count,result,old_result,diff_between_b);
                var result = this.gradientDescent(x,y,this.state.numIterations,this.state.learningRate);
                if(result.b==NaN){
                    if(old_result!=null){
                        result=old_result;
                    }
                    break;
                }
                if(old_result!=null){
                    diff_between_b=Math.abs(old_result.b-result.b);
                    if(diff_between_b<=0.05 || this.state.numIterations>=10000){
                        break;
                    }
                }
                old_result=result;                
                for(var i=0;i<x.length;i++){
                    y[i] = x[i]*result.m+result.b;
                    this.drawPoint(x[i],y[i],'#D07A7A');
                }
                if(!this.state.autoIncreaseStep){
                    break;
                }
                this.state.numIterations=parseInt(this.state.numIterations)+100;
                console.log(this.state.numIterations);
                count+=1;
            }
            for(var i=0;i<x.length;i++){
                y[i] = x[i]*result.m+result.b;
                this.drawPoint(x[i],y[i],'red');
                this.addCorrectPoint({x: x[i], y: y[i]});
            }
            //draw line
            let N = this.state.points.length-1;
            this.state.correct_points = this.state.correct_points.sort((a, b) => {
                return b.x - a.x;
            });
            //console.log(this.state.correct_points);
            if(this.state.correct_points.length > 0 && this.state.line==null) {
                for(var i=0;i<this.state.correct_points.length-1;i++){
                    var begin = {x:this.state.correct_points[i].x,y:this.state.correct_points[i].y};
                    var end = {x:this.state.correct_points[i+1].x,y:this.state.correct_points[i+1].y};
                    this.state.line={begin,end};
                    this.drawLine();
                }
            }
        }
        onClickGeneratePoints(event) {
            const ctx = this.refs.canvas.getContext('2d');
            this.resetCanvas();
            for (var i = 0; i < this.state.numberOfPoints; i++) {
                var x = this.generateNumber(this.state.width);
                var y = this.state.height-this.generateNumber(this.state.height);
                this.addPoint({x: x, y: y});
                this.drawPoint(x,y);
            }
            this.state.points = this.state.points.sort((a, b) => {
                return b.x - a.x;
            });
        }
        onChangeNumberOfPoints(event) {
            this.setState({
                numberOfPoints: event.target.value
            });
        }
        onChangeNumIterations(event) {
            this.setState({
                numIterations: event.target.value
            });
        }
        onChangeLearningRate(event) {
            this.setState({
                learningRate: event.target.value
            });
        }        
        onChangeAutoIncreaseStep(event) {
            this.setState({
                autoIncreaseStep: !this.state.autoIncreaseStep
            });
        }
        //Canvas
        componentDidMount() {
            this.updateCanvas();            
        }
        updateCanvas() {
            const ctx = this.refs.canvas.getContext('2d');
            this.resetCanvas();
            //ctx.fillRect(100,100, 100, 100);//rysuje du≈ºy czarny kwadrat
        }
        render() {
            const imageUrl = `/img/janusz_mem.png`
            const MemStyle = {
                backgroundImage: `url(${imageUrl})`
            };
            const InputStyle = {
                width: `100%`
            };
            return (
                <div>
                    <div className="row">
                        <div className="col-sm-8">            
                            <h5 id="parameters_header">Parametry</h5><hr/>
                            <div className="row">
                                <div className="col-sm-6 col-md-6 col-lg-6 col-xl-3">
                                    <p id="PointsofCounts">Liczba punkt√≥w</p>						
                                </div>
                                <div className="col-sm-6 col-md-6 col-lg-6 col-xl-3">
                                    <input
                                        id="number_points_input" 
                                        style={InputStyle}
                                        type="number"
                                        min="2" 
                                        max="1000"
                                        value={this.state.numberOfPoints}
                                        onChange={this.onChangeNumberOfPoints.bind(this)}
                                    />
                                </div>					
                            </div>
                            <div className="row">
                                <div className="col-sm-6 col-md-6 col-lg-6 col-xl-3">
                                    <p id="PointsofCounts">Liczba krok√≥w</p>						
                                </div>
                                <div className="col-sm-6 col-md-6 col-lg-6 col-xl-3">
                                    <input
                                        id="num_iterations_input" 
                                        style={InputStyle}
                                        type="number"
                                        value={this.state.numIterations}
                                        onChange={this.onChangeNumIterations.bind(this)}
                                    />
                                </div>					
                            </div>
                            <div className="row">
                                <div className="col-sm-6 col-md-6 col-lg-6 col-xl-3">
                                    <p id="PointsofCounts">Wielko≈õƒá kroku</p>						
                                </div>
                                <div className="col-sm-6 col-md-6 col-lg-6 col-xl-3">
                                    <input
                                        id="learning_rate_input" 
                                        style={InputStyle}
                                        type="number"
                                        step="0.0001" 
                                        min="0" 
                                        max="1"
                                        value={this.state.learningRate}
                                        onChange={this.onChangeLearningRate.bind(this)}
                                    />
                                </div>					
                            </div>
                            <div className="row">
                                <div className="col-sm-12 col-md-12 col-lg-12 col-xl-6">
                                    <label class="form-check-label" for="check2">
                                        <input 
                                            type="checkbox"
                                            className="form-check-input"
                                            defaultChecked={this.state.autoIncreaseStep}
                                            onChange={this.onChangeAutoIncreaseStep.bind(this)}
                                        />
                                        <p id="PointsofCounts">Automatyczne zwiƒôkszanie liczby krok√≥w</p>
                                    </label>					
                                </div>                                
                            </div>
                        </div>
                        <div className="col-sm-4">            
                            <h5 id="parameters_header">Akcje</h5><hr/>
                            <div className="btn-group Linear_Regression">
                                <button id="generate_points" onClick={this.onClickGeneratePoints.bind(this)} className="btn btn-chocolate" type="button">
                                    <i className="fas fa-dice"></i> Generuj punkty
                                </button>
                                <button id="run" onClick={this.onClickDrawRegressionLine.bind(this)} className="btn btn-chocolate" type="button">
                                    <i className="fas fa-play"></i> Wykonaj
                                </button>
                            </div>
                            <div className="btn-group Linear_Regression">
                                <button id="clearLine" onClick={this.onClickClearRegressionLine.bind(this)} className="btn btn-chocolate" type="button">
                                    <i className="fas fa-broom"></i> Usu≈Ñ liniƒô
                                </button>
                            </div>
                        </div>
                    </div>
                    <div className="row">
                        <div className="col-sm-12">            
                            <div className="canvasSpace" id="linearRegressionCanvas">
                                <canvas ref="canvas" width={this.state.width} height={this.state.height}>
                                    <p className="info">Twoja przeglƒÖdarka nie obs≈Çuguje canvasa, sorry... hehe...</p>                    
                                    <div style={MemStyle} className="mem" >
                                        <div>
                                            <p>No i se poprogramowa≈Ç</p>
                                            <p>juniorze</p>
                                        </div>
                                    </div>
                                </canvas>
                            </div>            
                        </div>
                    </div>
                </div>
            );
        }
    }

    ReactDOM.render(<LinearRegressionComponent/>, document.getElementById('linearRegressionReact'));/**/
</script>